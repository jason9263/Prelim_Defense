clear;
clc;
%% M/D/K排队系统仿真
%SimTotal=input('请输入仿真顾客总数SimTotal='); %仿真顾客总数；
SimTotal=105; %仿真顾客总数；

Lambda=5;     %到达率Lambda；
Mu=1;           %单服务台的服务率Mu；
K=10   ;          %服务台数目
t_Arrive=zeros(1,SimTotal);
t_Leave=zeros(1,SimTotal);
ArriveNum=zeros(1,SimTotal);
LeaveNum=zeros(1,SimTotal);

Interval_Arrive=-log(rand(1,SimTotal))/Lambda;  %到达时间间隔 服从负指数分布
Interval_Serve=ones(1,SimTotal)*1/Mu;           %服务时间 为固定长度
%% 计算每个用户到达的时刻
t_Arrive(1)=Interval_Arrive(1);                 %顾客到达时间
ArriveNum(1)=1;
for i=2:SimTotal
    t_Arrive(i)=t_Arrive(i-1)+Interval_Arrive(i);
    ArriveNum(i)=i;
end

%% 计算每个用户离开的时刻
if  SimTotal<=K
    t_Leave(i)=t_Arrive(i)+Interval_Serve(i);
    LeaveNum(i)=i;
else
    for i=1:K
        t_Leave(i)=t_Arrive(i)+Interval_Serve(i);       %前K个用户到达可以直接接受服务，计算其离开的时间
        LeaveNum(i)=i;
    end  
    for i=K+1:SimTotal
        Flag=0 ;%初始状态，标记哪个服务台为忙
        for   j=1:i-1
            if t_Arrive(j)+Interval_Serve(j)>t_Arrive(i)
                Flag= Flag+1 ;
            else
                Flag= Flag+0 ;
            end
        end
        if  Flag           t_Leave(i)=t_Arrive(i)+Interval_Serve(i)   ;  
        else
           t_Leave(i)=min (  t_Leave(i-K:i-1)  )  +Interval_Serve(i)  ;
        end
    end 
end


t_Wait=t_Leave-t_Arrive;    % 各顾客在系统中的等待时间
t_Wait_avg=mean(t_Wait);    % 平均等待时间
t_Queue=t_Wait-Interval_Serve;% 各顾客在系统中的排队时间
t_Queue_avg=mean(t_Queue);  % 平均排队时间

%%
Timepoint=[t_Arrive,t_Leave];% 系统中顾客数随时间的变化,分别标记用户到达和离开的时间点
Timepoint=sort(Timepoint);   % 所有标记的用户到达和离开的时间点排序，以时间轴为坐标
ArriveFlag=zeros(size(Timepoint));% 到达时间标志
CusNum=zeros(size(Timepoint));
temp=2;  % 时间戳，记录用户到达或者离开的时间戳
CusNum(1)=1;    % 第一个用户到达时刻开始计时
for i=2:length(Timepoint)
    if (temp<=length(t_Arrive))&&(Timepoint(i)==t_Arrive(temp)) % 到达的时间点上用户数目加一，计算到达用户的标签
        CusNum(i)=CusNum(i-1)+1;
        temp=temp+1; % 所有用户到达的时间点，最多只有length(t_Arrive)用户，因此temp<=length(t_Arrive)
        ArriveFlag(i)=1;
    else    
        CusNum(i)=CusNum(i-1)-1; % 用户离开的时间点上用户数目减一
    end
end

%% 系统中平均顾客数计算
Time_interval=zeros(size(Timepoint));
Time_interval(1)=t_Arrive(1);
for i=2:length(Timepoint)
    Time_interval(i)=Timepoint(i)-Timepoint(i-1);%将用户到达或者离开看成事件，排队系统为事件触发，此处为事件之间的间隔。
end
CusNum_fromStart=[0 CusNum]; % 从0开始到所有用户离开的时间戳
CusNum_avg=sum(CusNum_fromStart.*[Time_interval 0] )/Timepoint(end); %平均每段时间间隔中的人数*时间间隔/总的时间长度

%% 队列长度（不含正在接受的用户）
QueLength=zeros(size(CusNum));
for i=1:length(CusNum)
    if CusNum(i)>=2
        QueLength(i)=CusNum(i)-1;%队列中的人数，不包含接受服务的人
    else
        QueLength(i)=0; %系统中顾客人数少于2个时队列中人数为0
    end
end
QueLength_avg=sum([0 QueLength].*[Time_interval 0] )/Timepoint(end);%系统平均等待队长

%% 仿真图
% figure(1);
% set(1,'position',[0,0,1000,700]);
% subplot(2,2,1);
% title('各顾客到达时间和离去时间');
% stairs([0 ArriveNum],[0 t_Arrive],'b');
% hold on;
% stairs([0 LeaveNum],[0 t_Leave],'r');
% legend('到达时间','离去时间');
% hold off;
% grid on
%
% subplot(2,2,2);
% stairs(Timepoint,CusNum,'b')
% title('系统等待队长分布');
% xlabel('时间');
% ylabel('队长');
%
% subplot(2,2,3);
% title('各顾客在系统中的排队时间和等待时间');
% stairs([0 ArriveNum],[0 t_Queue],'b');
% hold on;
% stairs([0 LeaveNum],[0 t_Wait],'r');
% hold off;
% legend('排队时间','等待时间');

%% 仿真值与理论值比较
rou= Lambda / (K*Mu) ;
rou_sub= Lambda / (Mu) ;
% Lambda=0.5;     %到达率Lambda；
% Mu=1;           %单服务台的服务率Mu；
% K=2   ;          %服务台数目
    %先计算MMK
    p00=0;
    p01=1/factorial(K)*1/(1-rou)*rou_sub^K;
    for k=0:K-1
        p00=p00+1/factorial(k)*rou_sub^k;
    end
    p0=1/( p00+p01 );
    mmk_L_q=(K*rou)^K*rou*p0/( factorial(K)*(1-rou)^2 ) ;
    mmk_L_s=mmk_L_q+rou_sub;
    mmk_W_q=mmk_L_q/Lambda;
    mmk_W_s=mmk_L_s/Lambda;
ncdm=1+(1-rou)*(K-1)*  (sqrt(4+5*K)-2)/(16*rou*K);
mdk_L_q=1/2*mmk_L_q*ncdm ;
mdk_L_s=mdk_L_q+rou_sub ;
mdk_W_q=mdk_L_q/Lambda;
mdk_W_s=mdk_L_s/Lambda ;


disp(['理论平均等待时间W_s=',num2str( mdk_W_s  )]);
disp(['理论平均排队时间W_q=',num2str( mdk_W_q )]);
disp(['理论系统中平均顾客数L_s=',num2str(  mdk_L_s )]);
disp(['理论系统中平均等待队长L_q=',num2str(mdk_L_q )]);

disp(['仿真平均等待时间W_s=',num2str(t_Wait_avg)])
disp(['仿真平均排队时间W_q=',num2str(t_Queue_avg)])
disp(['仿真系统中平均顾客数L_s=',num2str(CusNum_avg)]);
disp(['仿真系统中平均等待队长L_q=',num2str(QueLength_avg)]);