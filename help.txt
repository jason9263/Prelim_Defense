pos = [16    30
    46    33
    28    30
    9     36
    45    11
    30     6
    25    43
    6     16
    40    40
    20    15];

mcolor = [    0.1622    0.4505    0.1067
    0.7943    0.0838    0.9619
    0.3112    0.2290    0.0046
    0.5285    0.9133    0.7749
    0.1656    0.1524    0.8173
    0.6020    0.8258    0.8687
    0.2630    0.5383    0.0844
    0.6541    0.9961    0.3998
    0.6892    0.0782    0.2599
    0.7482    0.4427    0.8001];

Virtual cut through

Store and Forward

pos = [    22    43
    46    32
    10    18
    14    26
    8    21
    7     4
    44    12
    29     7
    28    10
    8    12
    ];

    mcolor = [
    0.5181    0.2548    0.9160
    0.9436    0.2240    0.0012
    0.6377    0.6678    0.4624
    0.9577    0.8444    0.4243
    0.2407    0.3445    0.4609
    0.6761    0.7805    0.7702
    0.2891    0.6753    0.3225
    0.6718    0.0067    0.7847
    0.6951    0.6022    0.4714
    0.0680    0.3868    0.0358
    ];

    
The equivalence inverse processing speed :
$$T_{f,n} = 1*w_{eq}*T_{cp}$$
$$w_{eq} = \alpha_{0}*w$$
The speedup is :
$$Speedup = \frac{T_{f, 0}}{T_{f, n}}= \frac{\omega T_{cp}}{\alpha_{0}\omega T_{cp}} = \frac{1}{\alpha_{0}}$$


xlabel('Longitude geographical coordinate');
ylabel('Latitude geographical coordinate');


\title{LinearProgram}
\maketitle
\begin{alignat}{2}
\min\quad & \hat{T_{f}}\\
\mbox{s.t.}\quad
&\mathop{\sum_{j=0}^{k-1}\sum_{i=0}^{S_{j}-1}} \hat{\alpha_{j,i}} = 1\\
& 1 \geq \hat{\alpha_{j,i}} \geq 0, &{}& \\
& T_{f,i} = T_{f,0}, &{i \in 1 \cdots (m*n-1)}& \\
&\hat{\alpha_{j,0}}wT_{cp} = \hat{T_{j,f}}, &{j \in 0 \cdots (k-1)}& \\
&\qquad \vdots , &{}&\\
&  (\hat{\alpha_{j,1}} + \cdots \hat{\alpha_{j,l_{j}-2}}) + \hat{\alpha_{j,l_{j}-1}}wT_{cp} = \hat{T_{j,f}}, &{j \in 0 \cdots (k-1)}& 
\end{alignat}


\title{LinearProgram}
\maketitle
\begin{alignat}{2}
\min\quad & \hat{T_{f}}\\
\mbox{s.t.}\quad
&\mathop{\sum_{j=0}^{k-1}\sum_{i=0}^{S_{j}-1}} \hat{\alpha_{j,i}} = 1\\
& 1 \geq \hat{\alpha_{j,i}} \geq 0, &{}& \\
& T_{f,i} = \hat{T_{j,f}}, &{i \in 0 \cdots (S_{j}-1)}& \\
&\hat{\alpha_{j,0}}wT_{cp} = \hat{T_{j,f}}, &{j \in 0 \cdots (k-1)}& \\
&\qquad \vdots , &{}&\\
&  (\hat{\alpha_{j,1}} + \cdots \hat{\alpha_{j,l_{j}-2}})zT_{cm} + \hat{\alpha_{j,l_{j}-1}}wT_{cp} = \hat{T_{j,f}}, &{j \in 0 \cdots (k-1)}& 
\end{alignat}


\title{LinearProgram}
\maketitle
\begin{alignat}{2}
\max\quad & Sp_{b}\\
\mbox{s.t.}\quad
&\mathop{\sum_{j=0}^{k-1}\sum_{i=0}^{S_{j}-1}} \hat{\alpha_{j,i}} = 1\\
& 1 \geq \hat{\alpha_{j,i}} \geq 0, &{}& \\
& T_{f,i} = \hat{T_{j,f}}, &{i \in 0 \cdots (S_{j}-1)}& \\
&\hat{\alpha_{j,0}}wT_{cp} = \hat{T_{j,f}}, &{j \in 0 \cdots (k-1)}& \\
&\qquad \vdots , &{}&\\
&  (\hat{\alpha_{j,1}} + \cdots \hat{\alpha_{j,l_{j}-2}} )zT_{cm} + \hat{\alpha_{j,l_{j}-1}}wT_{cp} = \hat{T_{j,f}}, &{j \in 0 \cdots (k-1)}& \\
& Sp_{i} = Sp_{b} + \epsilon, &{i \in 0 \cdots (k-1)}& \\
& \epsilon \geq 0 ,&{}&
\end{alignat}




\begin{figure}[!ht]
\centering
\includegraphics[width=1\columnwidth]{figure/torus_even.eps}
\caption{Subgraph and individual data injection division on torus network}
\label{fig:torus_even}
\end{figure}
\newpage

\begin{figure}[!ht]
\centering
\includegraphics[width=1\columnwidth]{figure/torus_even_save.eps}
\caption{Subgraph and individual data injection constrained Voronoi diagram division on torus network}
\label{fig:torus_even_save}
\end{figure}
\newpage




\begin{figure}[!ht]
\centering
\includegraphics[width=1\columnwidth]{figure/torus_even_speedup.eps}
\caption{Subgraph and individual data injection speedup curves on torus network}
\label{fig:torus_even_speedup}
\end{figure}
\newpage

\begin{figure}[!ht]
\centering
\includegraphics[width=1\columnwidth]{figure/torus_even_save_speedup.eps}
\caption{Subgraph and individual data injection constrained Voronoi diagram division speedup curves on torus network}
\label{fig:torus_even_save_speedup}
\end{figure}
\newpage